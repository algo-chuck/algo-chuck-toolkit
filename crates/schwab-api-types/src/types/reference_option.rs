/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::types;
use serde::{Deserialize, Serialize};

/// ReferenceOption : Reference data of Option security
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReferenceOption {
    #[serde(rename = "contractType", skip_serializing_if = "Option::is_none")]
    pub contract_type: Option<types::ContractType>,
    /// CUSIP of Instrument
    #[serde(rename = "cusip", skip_serializing_if = "Option::is_none")]
    pub cusip: Option<String>,
    /// Days to Expiration
    #[serde(rename = "daysToExpiration", skip_serializing_if = "Option::is_none")]
    pub days_to_expiration: Option<i32>,
    /// Unit of trade
    #[serde(rename = "deliverables", skip_serializing_if = "Option::is_none")]
    pub deliverables: Option<String>,
    /// Description of Instrument
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Exchange Code
    #[serde(rename = "exchange", skip_serializing_if = "Option::is_none")]
    pub exchange: Option<String>,
    /// Exchange Name
    #[serde(rename = "exchangeName", skip_serializing_if = "Option::is_none")]
    pub exchange_name: Option<String>,
    #[serde(rename = "exerciseType", skip_serializing_if = "Option::is_none")]
    pub exercise_type: Option<types::ExerciseType>,
    /// Expiration Day
    #[serde(rename = "expirationDay", skip_serializing_if = "Option::is_none")]
    pub expiration_day: Option<u32>,
    /// Expiration Month
    #[serde(rename = "expirationMonth", skip_serializing_if = "Option::is_none")]
    pub expiration_month: Option<u32>,
    #[serde(rename = "expirationType", skip_serializing_if = "Option::is_none")]
    pub expiration_type: Option<types::ExpirationType>,
    /// Expiration Year
    #[serde(rename = "expirationYear", skip_serializing_if = "Option::is_none")]
    pub expiration_year: Option<i32>,
    /// Is this contract part of the Penny Pilot program
    #[serde(rename = "isPennyPilot", skip_serializing_if = "Option::is_none")]
    pub is_penny_pilot: Option<bool>,
    /// milliseconds since epoch
    #[serde(rename = "lastTradingDay", skip_serializing_if = "Option::is_none")]
    pub last_trading_day: Option<i64>,
    /// Option multiplier
    #[serde(rename = "multiplier", skip_serializing_if = "Option::is_none")]
    pub multiplier: Option<f64>,
    #[serde(rename = "settlementType", skip_serializing_if = "Option::is_none")]
    pub settlement_type: Option<types::SettlementType>,
    /// Strike Price
    #[serde(rename = "strikePrice", skip_serializing_if = "Option::is_none")]
    pub strike_price: Option<f64>,
    /// A company, index or fund name
    #[serde(rename = "underlying", skip_serializing_if = "Option::is_none")]
    pub underlying: Option<String>,
}

impl ReferenceOption {
    /// Reference data of Option security
    pub fn new() -> ReferenceOption {
        ReferenceOption {
            contract_type: None,
            cusip: None,
            days_to_expiration: None,
            deliverables: None,
            description: None,
            exchange: None,
            exchange_name: None,
            exercise_type: None,
            expiration_day: None,
            expiration_month: None,
            expiration_type: None,
            expiration_year: None,
            is_penny_pilot: None,
            last_trading_day: None,
            multiplier: None,
            settlement_type: None,
            strike_price: None,
            underlying: None,
        }
    }
}
