/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Underlying {
    #[serde(rename = "ask", skip_serializing_if = "Option::is_none")]
    pub ask: Option<f64>,
    #[serde(rename = "askSize", skip_serializing_if = "Option::is_none")]
    pub ask_size: Option<i32>,
    #[serde(rename = "bid", skip_serializing_if = "Option::is_none")]
    pub bid: Option<f64>,
    #[serde(rename = "bidSize", skip_serializing_if = "Option::is_none")]
    pub bid_size: Option<i32>,
    #[serde(rename = "change", skip_serializing_if = "Option::is_none")]
    pub change: Option<f64>,
    #[serde(rename = "close", skip_serializing_if = "Option::is_none")]
    pub close: Option<f64>,
    #[serde(rename = "delayed", skip_serializing_if = "Option::is_none")]
    pub delayed: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "exchangeName", skip_serializing_if = "Option::is_none")]
    pub exchange_name: Option<ExchangeName>,
    #[serde(rename = "fiftyTwoWeekHigh", skip_serializing_if = "Option::is_none")]
    pub fifty_two_week_high: Option<f64>,
    #[serde(rename = "fiftyTwoWeekLow", skip_serializing_if = "Option::is_none")]
    pub fifty_two_week_low: Option<f64>,
    #[serde(rename = "highPrice", skip_serializing_if = "Option::is_none")]
    pub high_price: Option<f64>,
    #[serde(rename = "last", skip_serializing_if = "Option::is_none")]
    pub last: Option<f64>,
    #[serde(rename = "lowPrice", skip_serializing_if = "Option::is_none")]
    pub low_price: Option<f64>,
    #[serde(rename = "mark", skip_serializing_if = "Option::is_none")]
    pub mark: Option<f64>,
    #[serde(rename = "markChange", skip_serializing_if = "Option::is_none")]
    pub mark_change: Option<f64>,
    #[serde(rename = "markPercentChange", skip_serializing_if = "Option::is_none")]
    pub mark_percent_change: Option<f64>,
    #[serde(rename = "openPrice", skip_serializing_if = "Option::is_none")]
    pub open_price: Option<f64>,
    #[serde(rename = "percentChange", skip_serializing_if = "Option::is_none")]
    pub percent_change: Option<f64>,
    #[serde(rename = "quoteTime", skip_serializing_if = "Option::is_none")]
    pub quote_time: Option<i64>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "totalVolume", skip_serializing_if = "Option::is_none")]
    pub total_volume: Option<i64>,
    #[serde(rename = "tradeTime", skip_serializing_if = "Option::is_none")]
    pub trade_time: Option<i64>,
}

impl Underlying {
    pub fn new() -> Underlying {
        Underlying {
            ask: None,
            ask_size: None,
            bid: None,
            bid_size: None,
            change: None,
            close: None,
            delayed: None,
            description: None,
            exchange_name: None,
            fifty_two_week_high: None,
            fifty_two_week_low: None,
            high_price: None,
            last: None,
            low_price: None,
            mark: None,
            mark_change: None,
            mark_percent_change: None,
            open_price: None,
            percent_change: None,
            quote_time: None,
            symbol: None,
            total_volume: None,
            trade_time: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExchangeName {
    #[serde(rename = "IND")]
    Ind,
    #[serde(rename = "ASE")]
    Ase,
    #[serde(rename = "NYS")]
    Nys,
    #[serde(rename = "NAS")]
    Nas,
    #[serde(rename = "NAP")]
    Nap,
    #[serde(rename = "PAC")]
    Pac,
    #[serde(rename = "OPR")]
    Opr,
    #[serde(rename = "BATS")]
    Bats,
}

impl Default for ExchangeName {
    fn default() -> ExchangeName {
        Self::Ind
    }
}
