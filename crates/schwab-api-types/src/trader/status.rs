/*
 * Trader API - Account Access and User Preferences
 *
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "AWAITING_PARENT_ORDER")]
    AwaitingParentOrder,
    #[serde(rename = "AWAITING_CONDITION")]
    AwaitingCondition,
    #[serde(rename = "AWAITING_STOP_CONDITION")]
    AwaitingStopCondition,
    #[serde(rename = "AWAITING_MANUAL_REVIEW")]
    AwaitingManualReview,
    #[serde(rename = "ACCEPTED")]
    Accepted,
    #[serde(rename = "AWAITING_UR_OUT")]
    AwaitingUrOut,
    #[serde(rename = "PENDING_ACTIVATION")]
    PendingActivation,
    #[serde(rename = "QUEUED")]
    Queued,
    #[serde(rename = "WORKING")]
    Working,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "PENDING_CANCEL")]
    PendingCancel,
    #[serde(rename = "CANCELED")]
    Canceled,
    #[serde(rename = "PENDING_REPLACE")]
    PendingReplace,
    #[serde(rename = "REPLACED")]
    Replaced,
    #[serde(rename = "FILLED")]
    Filled,
    #[serde(rename = "EXPIRED")]
    Expired,
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "AWAITING_RELEASE_TIME")]
    AwaitingReleaseTime,
    #[serde(rename = "PENDING_ACKNOWLEDGEMENT")]
    PendingAcknowledgement,
    #[serde(rename = "PENDING_RECALL")]
    PendingRecall,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl std::fmt::Display for Status {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AwaitingParentOrder => write!(f, "AWAITING_PARENT_ORDER"),
            Self::AwaitingCondition => write!(f, "AWAITING_CONDITION"),
            Self::AwaitingStopCondition => write!(f, "AWAITING_STOP_CONDITION"),
            Self::AwaitingManualReview => write!(f, "AWAITING_MANUAL_REVIEW"),
            Self::Accepted => write!(f, "ACCEPTED"),
            Self::AwaitingUrOut => write!(f, "AWAITING_UR_OUT"),
            Self::PendingActivation => write!(f, "PENDING_ACTIVATION"),
            Self::Queued => write!(f, "QUEUED"),
            Self::Working => write!(f, "WORKING"),
            Self::Rejected => write!(f, "REJECTED"),
            Self::PendingCancel => write!(f, "PENDING_CANCEL"),
            Self::Canceled => write!(f, "CANCELED"),
            Self::PendingReplace => write!(f, "PENDING_REPLACE"),
            Self::Replaced => write!(f, "REPLACED"),
            Self::Filled => write!(f, "FILLED"),
            Self::Expired => write!(f, "EXPIRED"),
            Self::New => write!(f, "NEW"),
            Self::AwaitingReleaseTime => write!(f, "AWAITING_RELEASE_TIME"),
            Self::PendingAcknowledgement => write!(f, "PENDING_ACKNOWLEDGEMENT"),
            Self::PendingRecall => write!(f, "PENDING_RECALL"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for Status {
    fn default() -> Status {
        Self::AwaitingParentOrder
    }
}
