/*
 * Trader API - Account Access and User Preferences
 *
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::trader;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrderStrategy {
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    #[serde(rename = "advancedOrderType", skip_serializing_if = "Option::is_none")]
    pub advanced_order_type: Option<AdvancedOrderType>,
    #[serde(rename = "closeTime", skip_serializing_if = "Option::is_none")]
    pub close_time: Option<String>,
    #[serde(rename = "enteredTime", skip_serializing_if = "Option::is_none")]
    pub entered_time: Option<String>,
    #[serde(rename = "orderBalance", skip_serializing_if = "Option::is_none")]
    pub order_balance: Option<Box<trader::OrderBalance>>,
    #[serde(rename = "orderStrategyType", skip_serializing_if = "Option::is_none")]
    pub order_strategy_type: Option<trader::OrderStrategyType>,
    #[serde(rename = "orderVersion", skip_serializing_if = "Option::is_none")]
    pub order_version: Option<f64>,
    #[serde(rename = "session", skip_serializing_if = "Option::is_none")]
    pub session: Option<trader::Session>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<trader::ApiOrderStatus>,
    #[serde(rename = "allOrNone", skip_serializing_if = "Option::is_none")]
    pub all_or_none: Option<bool>,
    #[serde(rename = "discretionary", skip_serializing_if = "Option::is_none")]
    pub discretionary: Option<bool>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<trader::Duration>,
    #[serde(rename = "filledQuantity", skip_serializing_if = "Option::is_none")]
    pub filled_quantity: Option<f64>,
    #[serde(rename = "orderType", skip_serializing_if = "Option::is_none")]
    pub order_type: Option<trader::OrderType>,
    #[serde(rename = "orderValue", skip_serializing_if = "Option::is_none")]
    pub order_value: Option<f64>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<f64>,
    #[serde(rename = "remainingQuantity", skip_serializing_if = "Option::is_none")]
    pub remaining_quantity: Option<f64>,
    #[serde(
        rename = "sellNonMarginableFirst",
        skip_serializing_if = "Option::is_none"
    )]
    pub sell_non_marginable_first: Option<bool>,
    #[serde(
        rename = "settlementInstruction",
        skip_serializing_if = "Option::is_none"
    )]
    pub settlement_instruction: Option<trader::SettlementInstruction>,
    #[serde(rename = "strategy", skip_serializing_if = "Option::is_none")]
    pub strategy: Option<trader::ComplexOrderStrategyType>,
    #[serde(rename = "amountIndicator", skip_serializing_if = "Option::is_none")]
    pub amount_indicator: Option<trader::AmountIndicator>,
    #[serde(rename = "orderLegs", skip_serializing_if = "Option::is_none")]
    pub order_legs: Option<Vec<trader::OrderLeg>>,
}

impl OrderStrategy {
    pub fn new() -> OrderStrategy {
        OrderStrategy {
            account_number: None,
            advanced_order_type: None,
            close_time: None,
            entered_time: None,
            order_balance: None,
            order_strategy_type: None,
            order_version: None,
            session: None,
            status: None,
            all_or_none: None,
            discretionary: None,
            duration: None,
            filled_quantity: None,
            order_type: None,
            order_value: None,
            price: None,
            quantity: None,
            remaining_quantity: None,
            sell_non_marginable_first: None,
            settlement_instruction: None,
            strategy: None,
            amount_indicator: None,
            order_legs: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdvancedOrderType {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "OTO")]
    Oto,
    #[serde(rename = "OCO")]
    Oco,
    #[serde(rename = "OTOCO")]
    Otoco,
    #[serde(rename = "OT2OCO")]
    Ot2Oco,
    #[serde(rename = "OT3OCO")]
    Ot3Oco,
    #[serde(rename = "BLAST_ALL")]
    BlastAll,
    #[serde(rename = "OTA")]
    Ota,
    #[serde(rename = "PAIR")]
    Pair,
}

impl Default for AdvancedOrderType {
    fn default() -> AdvancedOrderType {
        Self::None
    }
}
