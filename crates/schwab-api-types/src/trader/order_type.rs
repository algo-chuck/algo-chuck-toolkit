/*
 * Trader API - Account Access and User Preferences
 *
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OrderType {
    #[serde(rename = "MARKET")]
    Market,
    #[serde(rename = "LIMIT")]
    Limit,
    #[serde(rename = "STOP")]
    Stop,
    #[serde(rename = "STOP_LIMIT")]
    StopLimit,
    #[serde(rename = "TRAILING_STOP")]
    TrailingStop,
    #[serde(rename = "CABINET")]
    Cabinet,
    #[serde(rename = "NON_MARKETABLE")]
    NonMarketable,
    #[serde(rename = "MARKET_ON_CLOSE")]
    MarketOnClose,
    #[serde(rename = "EXERCISE")]
    Exercise,
    #[serde(rename = "TRAILING_STOP_LIMIT")]
    TrailingStopLimit,
    #[serde(rename = "NET_DEBIT")]
    NetDebit,
    #[serde(rename = "NET_CREDIT")]
    NetCredit,
    #[serde(rename = "NET_ZERO")]
    NetZero,
    #[serde(rename = "LIMIT_ON_CLOSE")]
    LimitOnClose,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl std::fmt::Display for OrderType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Market => write!(f, "MARKET"),
            Self::Limit => write!(f, "LIMIT"),
            Self::Stop => write!(f, "STOP"),
            Self::StopLimit => write!(f, "STOP_LIMIT"),
            Self::TrailingStop => write!(f, "TRAILING_STOP"),
            Self::Cabinet => write!(f, "CABINET"),
            Self::NonMarketable => write!(f, "NON_MARKETABLE"),
            Self::MarketOnClose => write!(f, "MARKET_ON_CLOSE"),
            Self::Exercise => write!(f, "EXERCISE"),
            Self::TrailingStopLimit => write!(f, "TRAILING_STOP_LIMIT"),
            Self::NetDebit => write!(f, "NET_DEBIT"),
            Self::NetCredit => write!(f, "NET_CREDIT"),
            Self::NetZero => write!(f, "NET_ZERO"),
            Self::LimitOnClose => write!(f, "LIMIT_ON_CLOSE"),
            Self::Unknown => write!(f, "UNKNOWN"),
        }
    }
}

impl Default for OrderType {
    fn default() -> OrderType {
        Self::Market
    }
}
