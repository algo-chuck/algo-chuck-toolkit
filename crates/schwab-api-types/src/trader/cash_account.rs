/*
 * Trader API - Account Access and User Preferences
 *
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::trader;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CashAccount {
    #[serde(rename = "initialBalances", skip_serializing_if = "Option::is_none")]
    pub initial_balances: Option<Box<trader::CashInitialBalance>>,
    #[serde(rename = "currentBalances", skip_serializing_if = "Option::is_none")]
    pub current_balances: Option<Box<trader::CashBalance>>,
    #[serde(rename = "projectedBalances", skip_serializing_if = "Option::is_none")]
    pub projected_balances: Option<Box<trader::CashBalance>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "accountNumber", skip_serializing_if = "Option::is_none")]
    pub account_number: Option<String>,
    #[serde(rename = "roundTrips", skip_serializing_if = "Option::is_none")]
    pub round_trips: Option<i32>,
    #[serde(rename = "isDayTrader", skip_serializing_if = "Option::is_none")]
    pub is_day_trader: Option<bool>,
    #[serde(
        rename = "isClosingOnlyRestricted",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_closing_only_restricted: Option<bool>,
    #[serde(rename = "pfcbFlag", skip_serializing_if = "Option::is_none")]
    pub pfcb_flag: Option<bool>,
    #[serde(rename = "positions", skip_serializing_if = "Option::is_none")]
    pub positions: Option<Vec<trader::Position>>,
}

impl CashAccount {
    pub fn new() -> CashAccount {
        CashAccount {
            initial_balances: None,
            current_balances: None,
            projected_balances: None,
            r#type: None,
            account_number: None,
            round_trips: None,
            is_day_trader: None,
            is_closing_only_restricted: None,
            pfcb_flag: None,
            positions: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CASH")]
    Cash,
    #[serde(rename = "MARGIN")]
    Margin,
}

impl Default for Type {
    fn default() -> Type {
        Self::Cash
    }
}
