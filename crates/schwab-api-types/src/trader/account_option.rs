/*
 * Trader API - Account Access and User Preferences
 *
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::trader;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountOption {
    #[serde(rename = "optionDeliverables", skip_serializing_if = "Option::is_none")]
    pub option_deliverables: Option<Vec<trader::AccountApiOptionDeliverable>>,
    #[serde(rename = "putCall", skip_serializing_if = "Option::is_none")]
    pub put_call: Option<PutCall>,
    #[serde(rename = "optionMultiplier", skip_serializing_if = "Option::is_none")]
    pub option_multiplier: Option<i32>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "underlyingSymbol", skip_serializing_if = "Option::is_none")]
    pub underlying_symbol: Option<String>,
    #[serde(rename = "assetType")]
    pub asset_type: AssetType,
    #[serde(rename = "cusip", skip_serializing_if = "Option::is_none")]
    pub cusip: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "instrumentId", skip_serializing_if = "Option::is_none")]
    pub instrument_id: Option<i64>,
    #[serde(rename = "netChange", skip_serializing_if = "Option::is_none")]
    pub net_change: Option<f64>,
}

impl AccountOption {
    pub fn new(asset_type: AssetType) -> AccountOption {
        AccountOption {
            option_deliverables: None,
            put_call: None,
            option_multiplier: None,
            r#type: None,
            underlying_symbol: None,
            asset_type,
            cusip: None,
            symbol: None,
            description: None,
            instrument_id: None,
            net_change: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PutCall {
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "CALL")]
    Call,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for PutCall {
    fn default() -> PutCall {
        Self::Put
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "VANILLA")]
    Vanilla,
    #[serde(rename = "BINARY")]
    Binary,
    #[serde(rename = "BARRIER")]
    Barrier,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for Type {
    fn default() -> Type {
        Self::Vanilla
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AssetType {
    #[serde(rename = "EQUITY")]
    Equity,
    #[serde(rename = "OPTION")]
    Option,
    #[serde(rename = "INDEX")]
    Index,
    #[serde(rename = "MUTUAL_FUND")]
    MutualFund,
    #[serde(rename = "CASH_EQUIVALENT")]
    CashEquivalent,
    #[serde(rename = "FIXED_INCOME")]
    FixedIncome,
    #[serde(rename = "CURRENCY")]
    Currency,
    #[serde(rename = "COLLECTIVE_INVESTMENT")]
    CollectiveInvestment,
}

impl Default for AssetType {
    fn default() -> AssetType {
        Self::Equity
    }
}
