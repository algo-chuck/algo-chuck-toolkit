/*
 * Trader API - Account Access and User Preferences
 *
 * Schwab Trader API access to Account, Order entry and User Preferences
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExecutionLeg {
    #[serde(rename = "legId", skip_serializing_if = "Option::is_none")]
    pub leg_id: Option<i64>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<f64>,
    #[serde(rename = "mismarkedQuantity", skip_serializing_if = "Option::is_none")]
    pub mismarked_quantity: Option<f64>,
    #[serde(rename = "instrumentId", skip_serializing_if = "Option::is_none")]
    pub instrument_id: Option<i64>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

impl ExecutionLeg {
    pub fn new() -> ExecutionLeg {
        ExecutionLeg {
            leg_id: None,
            price: None,
            quantity: None,
            mismarked_quantity: None,
            instrument_id: None,
            time: None,
        }
    }
}
