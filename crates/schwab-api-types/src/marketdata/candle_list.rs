/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::marketdata;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CandleList {
    #[serde(rename = "candles", skip_serializing_if = "Option::is_none")]
    pub candles: Option<Vec<marketdata::Candle>>,
    #[serde(rename = "empty", skip_serializing_if = "Option::is_none")]
    pub empty: Option<bool>,
    #[serde(rename = "previousClose", skip_serializing_if = "Option::is_none")]
    pub previous_close: Option<f64>,
    #[serde(rename = "previousCloseDate", skip_serializing_if = "Option::is_none")]
    pub previous_close_date: Option<i64>,
    #[serde(
        rename = "previousCloseDateISO8601",
        skip_serializing_if = "Option::is_none"
    )]
    pub previous_close_date_iso8601: Option<String>,
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
}

impl CandleList {
    pub fn new() -> CandleList {
        CandleList {
            candles: None,
            empty: None,
            previous_close: None,
            previous_close_date: None,
            previous_close_date_iso8601: None,
            symbol: None,
        }
    }
}
