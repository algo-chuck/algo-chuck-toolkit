/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::marketdata;
use serde::{Deserialize, Serialize};

/// FutureOptionResponse : Quote info of Future Option security
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FutureOptionResponse {
    #[serde(rename = "assetMainType", skip_serializing_if = "Option::is_none")]
    pub asset_main_type: Option<marketdata::AssetMainType>,
    /// SSID of instrument
    #[serde(rename = "ssid", skip_serializing_if = "Option::is_none")]
    pub ssid: Option<i64>,
    /// Symbol of instrument
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// is quote realtime
    #[serde(rename = "realtime", skip_serializing_if = "Option::is_none")]
    pub realtime: Option<bool>,
    #[serde(rename = "quote", skip_serializing_if = "Option::is_none")]
    pub quote: Option<Box<marketdata::QuoteFutureOption>>,
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<Box<marketdata::ReferenceFutureOption>>,
}

impl FutureOptionResponse {
    /// Quote info of Future Option security
    pub fn new() -> FutureOptionResponse {
        FutureOptionResponse {
            asset_main_type: None,
            ssid: None,
            symbol: None,
            realtime: None,
            quote: None,
            reference: None,
        }
    }
}
