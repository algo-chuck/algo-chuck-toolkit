/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

/// QuoteRequest : Request one or more quote data in POST body
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QuoteRequest {
    /// List of cusip, max of 500 of symbols+cusip+ssids
    #[serde(rename = "cusips", skip_serializing_if = "Option::is_none")]
    pub cusips: Option<Vec<String>>,
    /// comma separated list of nodes in each quote<br/> possible values are quote,fundamental,reference,extended,regular. Dont send this attribute for full response.
    #[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
    pub fields: Option<String>,
    /// List of Schwab securityid[SSID], max of 500 of symbols+cusip+ssids
    #[serde(rename = "ssids", skip_serializing_if = "Option::is_none")]
    pub ssids: Option<Vec<u64>>,
    /// List of symbols, max of 500 of symbols+cusip+ssids
    #[serde(rename = "symbols", skip_serializing_if = "Option::is_none")]
    pub symbols: Option<Vec<String>>,
    /// Get realtime quotes and skip entitlement check
    #[serde(rename = "realtime", skip_serializing_if = "Option::is_none")]
    pub realtime: Option<bool>,
    /// Include indicative symbol quotes for all ETF symbols in request. If ETF symbol ABC is in request and indicative=true API will return quotes for ABC and its corresponding indicative quote for $ABC.IV
    #[serde(rename = "indicative", skip_serializing_if = "Option::is_none")]
    pub indicative: Option<bool>,
}

impl QuoteRequest {
    /// Request one or more quote data in POST body
    pub fn new() -> QuoteRequest {
        QuoteRequest {
            cusips: None,
            fields: None,
            ssids: None,
            symbols: None,
            realtime: None,
            indicative: None,
        }
    }
}
