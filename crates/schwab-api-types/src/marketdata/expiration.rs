/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::marketdata;
use serde::{Deserialize, Serialize};

/// Expiration : expiration type
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Expiration {
    #[serde(rename = "daysToExpiration", skip_serializing_if = "Option::is_none")]
    pub days_to_expiration: Option<i32>,
    #[serde(rename = "expiration", skip_serializing_if = "Option::is_none")]
    pub expiration: Option<String>,
    #[serde(rename = "expirationType", skip_serializing_if = "Option::is_none")]
    pub expiration_type: Option<marketdata::ExpirationType>,
    #[serde(rename = "standard", skip_serializing_if = "Option::is_none")]
    pub standard: Option<bool>,
    #[serde(rename = "settlementType", skip_serializing_if = "Option::is_none")]
    pub settlement_type: Option<marketdata::SettlementType>,
    #[serde(rename = "optionRoots", skip_serializing_if = "Option::is_none")]
    pub option_roots: Option<String>,
}

impl Expiration {
    /// expiration type
    pub fn new() -> Expiration {
        Expiration {
            days_to_expiration: None,
            expiration: None,
            expiration_type: None,
            standard: None,
            settlement_type: None,
            option_roots: None,
        }
    }
}
