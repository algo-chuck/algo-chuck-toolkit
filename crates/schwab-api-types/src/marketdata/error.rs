/*
 * Market Data
 *
 * Trader API - Market data
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: TraderAPI@Schwab.com
 * Generated by: https://openapi-generator.tech
 */

use crate::marketdata;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Error {
    /// Unique error id.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    /// The HTTP status code .
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Short error description.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// Detailed error description.
    #[serde(rename = "detail", skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<marketdata::ErrorSource>>,
}

impl Error {
    pub fn new() -> Error {
        Error {
            id: None,
            status: None,
            title: None,
            detail: None,
            source: None,
        }
    }
}
/// The HTTP status code .
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "400")]
    Variant400,
    #[serde(rename = "401")]
    Variant401,
    #[serde(rename = "404")]
    Variant404,
    #[serde(rename = "500")]
    Variant500,
}

impl Default for Status {
    fn default() -> Status {
        Self::Variant400
    }
}
